---
version: '3.8'

x-public-validation:
  hdci_folder: ${HDCI_FOLDER? HDCI Folder missing}
  hdci_domain: ${HDCI_DOMAIN? HDCI Domain missing}

services:
  hdci-traefik:

    deploy:
      restart_policy:
        condition: any

    image: traefik:v3

    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
      - target: 8080
        published: 8080
        mode: host

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

      - ${HDCI_FOLDER}/traefik/letsecnrypt:/letsencrypt
      - ${HDCI_FOLDER}/traefik/logs:/var/log/traefik

      - ${HDCI_FOLDER}/static-configurations/traefik:/traefik-conf:ro
      - ${HDCI_FOLDER}/static-configurations/cloudflare:/cloudflare-api:ro
      - ${HDCI_FOLDER}/static-configurations/auth/rev-proxy:/authfiles:ro

    command:
      --configFile=/traefik-conf/conf.yaml

    environment:
      CF_API_EMAIL_FILE: /cloudflare-api/CLOUDFLARE_API_EMAIL
      CF_API_KEY_FILE: /cloudflare-api/CLOUDFLARE_API_KEY

    labels:
      - traefik.enable=true

      - traefik.http.routers.hdci-traefik-api.rule=Host(`traefik.${HDCI_DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      - traefik.http.routers.hdci-traefik-api.entrypoints=websecure
      - traefik.http.routers.hdci-traefik-api.service=api@internal
      - traefik.http.routers.hdci-uptime-kuma.tls.certResolver=cloudflare
    networks:
      - hdci-traefik-network

  hdci-whoami-traefik:
    deploy:
      restart_policy:
        condition: any

    image: traefik/whoami:latest
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.hdci-whoami.rule=Host(`whoami.${HDCI_DOMAIN}`)
      - traefik.http.routers.hdci-whoami.entrypoints=websecure
      - traefik.http.routers.hdci-whoami.tls.certResolver=cloudflare
    networks:
      - hdci-traefik-network

  hdci-drone-server:
    deploy:
      restart_policy:
        condition: any

    image: drone/drone:2
    volumes:
      - ${HDCI_FOLDER}/drone/data:/data
    environment:
      DRONE_SERVER_HOST: drone.${HDCI_DOMAIN}
      DRONE_GITHUB_CLIENT_ID: ${DRONE_GITHUB_CLIENT_ID?Missing Drone Github Client ID}
      DRONE_GITHUB_CLIENT_SECRET: ${DRONE_GITHUB_CLIENT_SECRET?Missing Drone Github Client Secret}
      DRONE_RPC_SECRET: ${DRONE_RPC_SECRET?Missing Drone RPC Secret}
      DRONE_USER_FILTER: ${DRONE_USER_FILTER}
      # Server
      DRONE_SERVER_PROTO: ${DRONE_SERVER_PROTO:-https}
      DRONE_TLS_AUTOCERT: ${DRONE_TLS_AUTOCERT:-true}
      DRONE_USER_CREATE: ${DRONE_USER_CREATE?Missing default user upon creation}
      DRONE_DATABASE_SECRET: ${DRONE_DATABASE_SECRET}
      # Logs
      DRONE_LOGS_DEBUG: ${DRONE_LOGS_DEBUG:-true}
      DRONE_LOGS_TEXT: ${DRONE_LOGS_TEXT:-true}
      DRONE_LOGS_PRETTY: ${DRONE_LOGS_PRETTY:-true}
      DRONE_LOGS_COLOR: ${DRONE_LOGS_COLOR:-true}
      DRONE_LOGS_TRACE: ${DRONE_LOGS_TRACE:-true}
      # Misc.
      TZ: ${DRONE_TZ:-Europe/Paris}
    labels:
      - traefik.enable=true
      - traefik.http.routers.hdci-drone-entrypoints=websecure
      - traefik.http.routers.hdci-drone.rule=Host(`drone.${HDCI_DOMAIN}`)
      - traefik.http.routers.hdci-drone.tls.certResolver=cloudflare
    networks:
      - hdci-traefik-network

  hdci-drone-runner-docker:
    deploy:
      restart_policy:
        condition: any
      mode: replicated
      replicas: ${DRONE_RUNNER_REPLICAS:-1}
      endpoint_mode: vip

    image: drone/drone-runner-docker:1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    environment:
      DRONE_RPC_PROTO: https
      DRONE_RPC_HOST: drone.${HDCI_DOMAIN}
      DRONE_RPC_SECRET: ${DRONE_RPC_SECRET}
      DRONE_RUNNER_CAPACITY: ${DRONE_RUNNER_CAPACITY:-2}
      DRONE_RUNNER_NAME: hdci-drone-runner-docker
    networks:
      - hdci-traefik-network

  hdci-registry:
    deploy:
      restart_policy:
        condition: any
    image: registry:2
    environment:
      REGISTRY_AUTH: htpasswd
      REGISTRY_AUTH_HTPASSWD_REALM: Registry
      REGISTRY_AUTH_HTPASSWD_PATH: /registry/auth/.htpasswd
      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /registry/data
      REGISTRY_HTTP_RELATIVEURLS: "true"
    volumes:
      - ${HDCI_FOLDER}/registry/:/registry
      - ${HDCI_FOLDER}/static-configurations/auth/private/registry:/registry/auth:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.hdci-registry.entrypoints=websecure
      - traefik.http.routers.hdci-registry.rule=Host(`registry.${HDCI_DOMAIN}`)
      - traefik.http.routers.hdci-registry.tls.certResolver=cloudflare
      - traefik.http.services.hdci-registry.loadbalancer.server.port=5000
    networks:
      - hdci-traefik-network

  hdci-portainer:
    deploy:
      restart_policy:
        condition: any
    image: portainer/portainer-ce:latest
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${HDCI_FOLDER}/portainer:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.hdci-portainer.rule=Host(`portainer.${HDCI_DOMAIN}`)
      - traefik.http.routers.hdci-portainer.entrypoints=websecure
      - traefik.http.routers.hdci-portainer.tls.certResolver=cloudflare
      - traefik.http.services.hdci-portainer.loadbalancer.server.port=9000
      - traefik.http.routers.middlewares.auth.basicauth.usersfile=/authfiles/portainer/.htpasswd
    networks:
      - hdci-traefik-network

  hdci-uptime-kuma:
    deploy:
      restart_policy:
        condition: any
    image: louislam/uptime-kuma:1
    volumes:
      - ${HDCI_FOLDER}/uptime-kuma:/app/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.hdci-uptime-kuma.entrypoints=websecure
      - traefik.http.routers.hdci-uptime-kuma.rule=Host(`status.${HDCI_DOMAIN}`)
      - traefik.http.routers.hdci-uptime-kuma.tls.certResolver=cloudflare
      - traefik.http.services.hdci-uptime-kuma.server.port=3001
    networks:
      - hdci-traefik-network

networks:
  hdci-traefik-network:
    name: hdci-traefik-network
    external: true
